int kth(int arr1[], int m, int arr2[], int n, int k) 
{ 
      
  if (k > (m+n) || k < 1) return -1; 
    
  // let m <= n 
  if (m > n) return kth(arr2, n, arr1, m, k); 
    
  // if arr1 is empty returning k-th element of arr2 
  if (m == 0) return arr2[k - 1]; 
    
  // if k = 1 return minimum of first two elements of both arrays  
  if (k == 1) return min(arr1[0], arr2[0]); 
    
  // now the divide and conquer part 
  int i = min(m, k / 2), j = min(n, k / 2); 
    
  if (arr1[i - 1] > arr2[j - 1] )  
    // Now we need to find only k-j th element since we have found out the lowest j 
    return kth(arr1, m, arr2 + j, n - j, k - j); 
  else 
    // Now we need to find only k-i th element since we have found out the lowest i 
    return kth(arr1 + i, m - i, arr2, n, k - i); 
} 
