Solution: Boyer–Moore majority vote algorithm O(N), O(1)

I've read a few explanations of this algorithm, but I feel a need for a more detailed talk. Here's my take on this algorithm, hope it will help somebody.

class Solution {
public:
  vector<int> majorityElement(vector<int> &a) 
  {
	  int y(-1), z(-1), cy(0), cz(0);
    
	  for (const auto & x: a) 
	  {
		  if (x == y) cy++;
		  else if (x == z) cz++;
		  else if (! cy) y = x, cy = 1;
		  else if (! cz) z = x, cz = 1;
		  else cy--, cz--;
     }
      
     cy = cz = 0;
     for (const auto & x: a)
		 if (x == y) cy++;
			 else if (x == z) cz++;
  
	  vector<int> r;
	  if (cy > size(a)/3) r.push_back(y);
	  if (cz > size(a)/3) r.push_back(z);
	  return r;
  }
};
This is a two-pass algorithm: the first pass chooses two candidates, the second pass either confirms or rejects each of them.

Explanation: Forming triples
In order to get a feeling of Boyer–Moore ⌊ n/2 ⌋ majority vote algorithm see my explanation here
(https://leetcode.com/problems/majority-element/discuss/543431/Majority-vote-algorithm-EXPLAINED-(with-pictures)).
The main point of algorithm is to form triples of different numbers like these (1,2,3), (1,3,4): the leftovers
after this triple-forming procedure will be our majority candidates. Two different triples may coinside (e.g. (1,2,3), (1,2,3)).
These triples are formed under the hood and never articulated, so it's a bit hard to see them at first. These triples
are produced when the two counters are decresed (in the ultimate else section where -- occur). Let me elaborate on how 
this is done exactly and then I'll explain what do we need those triples for.
